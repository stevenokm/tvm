#!/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

set -euo pipefail

cd "$(dirname "$0")"

rm -rf build lockfiles
mkdir build
cat >build/pyproject.toml <<EOF
# AUTOGENERATED DO NOT EDIT

[tool.poetry]
name = "apache-tvm-bootstrap"
authors = []
version = "0.0.1"
description = ""

[tool.poetry.dependencies]
python = ">=3.7,<3.9"
EOF

cat requirements.txt | (while read line; do echo "$line = \"*\"" >>build/pyproject.toml; done)

python3 -mvenv build/_venv
. build/_venv/bin/activate
(mkdir -p build/downloaded && cd build/downloaded && pip3 download pip setuptools && pip3 install *.whl)
pip3 install poetry
(cd build && poetry lock && poetry export -o constraints.txt)


(cd build && python3 <<EOF
import os
import pkginfo
import subprocess

with open("constraints.txt", "a") as constraints_f:
  for f in sorted(os.scandir("downloaded"), key=lambda x: x.name):
    if not f.is_file():
      continue
    p = pkginfo.get_metadata("downloaded/" + f.name)
    constraints_f.write(
      f"{p.name}=={p.version} {subprocess.check_output(['pip3', 'hash', '-a', 'sha256', p.filename], encoding='utf-8').split()[1]}\n")
EOF
)

# with open("../requirements.txt") as f:
#   requirements = list(l.strip() for l in f if l.strip() and not l.startswith("#"))

# hashed_req = []
# found = False
# with open("constraints.txt") as f:
#   constraints.extend(l.strip() for l in f if l.strip())

# for line in constraints:
#   if line.strip().startswith("--hash="):
#     if found:
#       hashed_req.append(line)
#   else:
#     if line[:line.find("=")] in requirements:
#       hashed_req.append(line)
#       found = True
#     else:
#       found = False

# with open("requirements-hashed.txt", "w") as f:
#   for line in hashed_req:
#     f.write(f"{line}\n")
# EOF
# )


# Assemble the directory passed to docker
mkdir lockfiles
cp requirements.txt build/constraints.txt lockfiles/  # build/requirements-hashed.txt
